[[javascript-modules]]
== JavaScript Modules

Over the years, we've seen multiple different ways in which to split code into more manageable units. For the longest time we've had the module pattern where you simply wrapped pieces of code in self-invoking function expressions. You had to be careful to sort your scripts so that each script came after all of its dependencies.

A while later, the RequireJS library was born. It provided a way of defining the dependencies of each module programmatically, so that a dependency graph is created and you wouldn't have to worry about sorting your scripts anymore. RequireJS demands that you provide an array of strings used to identify your dependencies and also wrap modules in a function call, which would then receive those dependencies as parameters. Many other libraries provide similar functionality but offer a slightly different API.

Other complexity management mechanisms exist, such as the dependency injection mechanism in AngularJS, where you define named components using functions where you can, in turn, specify other named component dependencies. AngularJS carries the load of dependency injection on your behalf, so you only have to name components and specify dependencies.

CommonJS surfaced as an alternative to RequireJS, and it was swiftly popularized by Node.js soon afterwards. In this chapter we'll take a look at CommonJS, which is still heavily in use today. We'll then cover the module system introduced to native JavaScript in ES6, and lastly we'll explore interoperability between CommonJS and native JavaScript modules -- also known as "ES modules".

=== 9.1 CommonJS

Unlike other module formats where modules are declared programatically, in CommonJS every file is a module. CommonJS modules have an implicit local scope, while the +global+ scope needs to be accessed explicitly. CommonJS modules can dynamically export a public interface consumers can interact with. CommonJS modules import their dependencies dynamically as well, resolving dependencies through +require+ function calls. These +require+ function calls are synchronous and return the interface exposed by required modules.

Interpreting the definition of a module format without looking at some code can be confusing. The following code snippet shows how a reusable CommonJS module file may look like. Both the +has+ and +union+ functions are local to our module's scope. Given that we've assigned +union+ to +module.exports+, that'll be the public API for our module.

[source,javascript]
----
function has (list, item) {
  return list.includes(item);
}
function union (list, item) {
  if (has(list, item)) {
    return list;
  }
  return [...list, item];
}
module.exports = union;
----

Suppose we take that snippet of code and save it as +union.js+. We can now consume +union.js+ in another CommonJS module. Let's call that one +app.js+. In order to consume +union.js+, we call +require+ passing in a relative path to the +union.js+ file. We can omit the file extension as long as it's +.js+ or +.json+.

[source,javascript]
----
const union = require(`./union`);
console.log(union([1, 2], 3));
// <- [1, 2, 3]
console.log(union([1, 2], 2));
// <- [1, 2]
----

We could run +app.js+ in its current state by downloading Node.js and using its command-line tool. The +node+ CLI also allows us to omit the file extension.

[source,shell]
----
node app
# [1, 2, 3]
# [1, 2]
----

The +require+ function in CommonJS modules can be treated dynamically, just like any other JavaScript function. This aspect of +require+ is sometimes leveraged to dynamically +require+ different modules that conform to one interface. As an example, let's conjure up a +templates+ directory with a number of view template functions. Our templates will take a model and return an HTML string.

The template found in the following code snippet renders an item of a grocery shopping list by reading its attributes from a +model+ object.

[source,javascript]
----
// views/item.js
module.exports = model => `<li>
  <span>${ model.amount }</span>
  <span>x </span>
  <span>${ model.name }</span>
</li>`;
----

Our application could easily print a +<li>+ by leveraging the +item.js+ view template.

[source,javascript]
----
// app.js
const renderItem = require(`./views/item`);
const html = renderItem({
  name: `Banana bread`,
  amount: 3
});
console.log(html);
----



image::../images/c09g01-grocery-item.png["Printing an item for our grocery shopping list"]


The following template renders the grocery list itself. It receives an array of items, and renders each of them by reusing the +item.js+ template from the previous code snippet.

[source,javascript]
----
// views/list.js
const renderItem = require('./item');

module.exports = model => `<ul>
  ${ model.forEach(renderItem) }
</ul>`;
----


9.1 CommonJS
9.2 Modules in ES6
9.3 Exports and Imports
9.4 Module Loading
9.5 Interoperability
9.6 Best Practices
9.7 Summary
